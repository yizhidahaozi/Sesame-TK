package fansirsqi.xposed.sesame.task.omegakoiTown;

import org.json.JSONArray;
import org.json.JSONObject;

import java.text.DecimalFormat;
import java.text.NumberFormat;

import fansirsqi.xposed.sesame.data.RuntimeInfo;
import fansirsqi.xposed.sesame.model.BaseModel;
import fansirsqi.xposed.sesame.model.ModelFields;
import fansirsqi.xposed.sesame.model.ModelGroup;
import fansirsqi.xposed.sesame.task.ModelTask;
import fansirsqi.xposed.sesame.task.TaskCommon;
import fansirsqi.xposed.sesame.util.Log;
public class OmegakoiTown extends ModelTask {
    private static final String TAG = OmegakoiTown.class.getSimpleName();
    @Override
    public String getName() {
        return "Â∞èÈïá";
    }
    @Override
    public ModelGroup getGroup() {
        return ModelGroup.OTHER;
    }
    @Override
    public ModelFields getFields() {
        return new ModelFields();
    }
    @Override
    public String getIcon() {
        return "OmegakoiTown.png";
    }
    public enum RewardType {
        gold, diamond, dyestuff, rubber, glass, certificate, shipping, tpuPhoneCaseCertificate,
        glassPhoneCaseCertificate, canvasBagCertificate, notebookCertificate, box, paper, cotton;
        public static final CharSequence[] rewardNames = {
                "ÈáëÂ∏Å", "ÈíªÁü≥", "È¢úÊñô", "Ê©°ËÉ∂",
                "ÁéªÁíÉ", "ÂêàÊ†ºËØÅ", "ÂåÖÈÇÆÂà∏", "TPUÊâãÊú∫Â£≥ÂêàÊ†ºËØÅ",
                "ÁéªÁíÉÊâãÊú∫Â£≥ÂêàÊ†ºËØÅ", "Â∏ÜÂ∏ÉË¢ãÂêàÊ†ºËØÅ", "ËÆ∞‰∫ãÊú¨ÂêàÊ†ºËØÅ",
                "Âø´ÈÄíÂåÖË£ÖÁõí", "Á∫∏Âº†", "Ê£âËä±"};
        public CharSequence rewardName() {
            return rewardNames[ordinal()];
        }
    }
    public enum HouseType {
        houseTrainStation("ÁÅ´ËΩ¶Á´ô"),
        houseStop("ÂÅúËΩ¶Âú∫"),
        houseBusStation("ÂÖ¨‰∫§Á´ô"),
        houseGas("Âä†Ê≤πÁ´ô"),
        houseSchool("Â≠¶Ê†°"),
        houseService("ÊúçÂä°Â§ßÂéÖ"),
        houseHospital("ÂåªÈô¢"),
        housePolice("Ë≠¶ÂØüÂ±Ä"),
        houseBank("Èì∂Ë°å"),
        houseRecycle("ÂõûÊî∂Á´ô"),
        houseWasteTreatmentPlant("ÂûÉÂúæÂ§ÑÁêÜÂéÇ"),
        houseMetro("Âú∞ÈìÅÁ´ô"),
        houseKfc("Âø´È§êÂ∫ó"),
        houseManicureShop("ÁæéÁî≤Â∫ó"),
        housePhoto("ÁÖßÁõ∏È¶Ü"),
        house5g("ÁßªÂä®Ëê•‰∏öÂéÖ"),
        houseGame("Ê∏∏ÊàèÂéÖ"),
        houseLucky("ËøêÊ∞îÂ±ã"),
        housePrint("ÊâìÂç∞Â∫ó"),
        houseBook("‰π¶Â∫ó"),
        houseGrocery("ÊùÇË¥ßÂ∫ó"),
        houseScience("ÁßëÊôÆÈ¶Ü"),
        housemarket1("ËèúÂú∫"),
        houseMcd("Ê±âÂ†°Â∫ó"),
        houseStarbucks("ÂíñÂï°ÂéÖ"),
        houseRestaurant("È§êÈ¶Ü"),
        houseFruit("Ê∞¥ÊûúÂ∫ó"),
        houseDessert("ÁîúÂìÅÂ∫ó"),
        houseClothes("ÊúçË£ÖÂ∫ó"),
        zhiketang("ÊîØËØæÂ†Ç"),
        houseFlower("Ëä±Â∫ó"),
        houseMedicine("ËçØÂ∫ó"),
        housePet("ÂÆ†Áâ©Â∫ó"),
        houseChick("Â∫ÑÂõ≠"),
        houseFamilyMart("ÂÖ®ÂÆ∂‰æøÂà©Â∫ó"),
        houseHouse("Âπ≥Êàø"),
        houseFlat("ÂÖ¨ÂØì"),
        houseVilla("Âà´Â¢Ö"),
        houseResident("Â±ÖÊ∞ëÊ•º"),
        housePowerPlant("È£éÂäõÂèëÁîµÁ´ô"),
        houseWaterPlant("Ëá™Êù•Ê∞¥ÂéÇ"),
        houseDailyChemicalFactory("Êó•ÂåñÂéÇ"),
        houseToyFactory("Áé©ÂÖ∑ÂéÇ"),
        houseSewageTreatmentPlant("Ê±°Ê∞¥Â§ÑÁêÜÂéÇ"),
        houseSports("‰ΩìËÇ≤È¶Ü"),
        houseCinema("ÁîµÂΩ±Èô¢"),
        houseCotton("Êñ∞ÁñÜÊ£âËä±ÂéÇ"),
        houseMarket("Ë∂ÖÂ∏Ç"),
        houseStadium("Ê∏∏Ê≥≥È¶Ü"),
        houseHotel("ÈÖíÂ∫ó"),
        housebusiness("ÂïÜÂú∫"),
        houseOrchard("ÊûúÂõ≠"),
        housePark("ÂÖ¨Âõ≠"),
        houseFurnitureFactory("ÂÆ∂ÂÖ∑ÂéÇ"),
        houseChipFactory("ËäØÁâáÂéÇ"),
        houseChemicalPlant("ÂåñÂ∑•ÂéÇ"),
        houseThermalPowerPlant("ÁÅ´ÁîµÁ´ô"),
        houseExpressStation("Âø´ÈÄíÈ©øÁ´ô"),
        houseDormitory("ÂÆøËàçÊ•º"),
        houseCanteen("È£üÂ†Ç"),
        houseAdministrationBuilding("Ë°åÊîøÊ•º"),
        houseGourmetPalace("ÁæéÈ£üÂüé"),
        housePaperMill("ÈÄ†Á∫∏ÂéÇ"),
        houseAuctionHouse("ÊãçÂçñË°å"),
        houseCatHouse("ÂñµÂ∞èÈ¶Ü"),
        houseStarPickingPavilion("Á•ûÁßòÁ†îÁ©∂ÊâÄ");
        HouseType(String name) {
        }
    }
    public Boolean check() {
        if (TaskCommon.IS_ENERGY_TIME){
            Log.record(TAG,"‚è∏ ÂΩìÂâç‰∏∫Âè™Êî∂ËÉΩÈáèÊó∂Èó¥„Äê"+ BaseModel.getEnergyTime().getValue() +"„ÄëÔºåÂÅúÊ≠¢ÊâßË°å" + getName() + "‰ªªÂä°ÔºÅ");
            return false;
        }else if (TaskCommon.IS_MODULE_SLEEP_TIME) {
            Log.record(TAG,"üí§ Ê®°Âùó‰ºëÁú†Êó∂Èó¥„Äê"+ BaseModel.getModelSleepTime().getValue() +"„ÄëÂÅúÊ≠¢ÊâßË°å" + getName() + "‰ªªÂä°ÔºÅ");
            return false;
        } else {
            long executeTime = RuntimeInfo.getInstance().getLong("omegakoiTown", 0);
            return System.currentTimeMillis() - executeTime >= 21600000;
        }

    }
    public void run() {
        try {
            Log.other("ÂºÄÂßãÊâßË°å-" + getName());
            RuntimeInfo.getInstance().put("omegakoiTown", System.currentTimeMillis());
            getUserTasks();
            getSignInStatus();
            houseProduct();
        } catch (Throwable t) {
            Log.runtime(TAG, "start.run err:");
            Log.printStackTrace(TAG, t);
        } finally {
            Log.other("ÁªìÊùüÊâßË°å-" + getName());
        }
    }
    private void getUserTasks() {
        try {
            String s = OmegakoiTownRpcCall.getUserTasks();
            JSONObject jo = new JSONObject(s);
            if (jo.optBoolean("success")) {
                JSONObject result = jo.getJSONObject("result");
                JSONArray tasks = result.getJSONArray("tasks");
                for (int i = 0; i < tasks.length(); i++) {
                    jo = tasks.getJSONObject(i);
                    boolean done = jo.getBoolean("done");
                    boolean hasRewarded = jo.getBoolean("hasRewarded");
                    if (done && !hasRewarded) {
                        JSONObject task = jo.getJSONObject("task");
                        String name = task.getString("name");
                        String taskId = task.getString("taskId");
                        if ("dailyBuild".equals(taskId))
                            continue;
                        int amount = task.getJSONObject("reward").getInt("amount");
                        String itemId = task.getJSONObject("reward").getString("itemId");
                        try {
                            RewardType rewardType = RewardType.valueOf(itemId);
                            jo = new JSONObject(OmegakoiTownRpcCall.triggerTaskReward(taskId));
                            if (jo.optBoolean("success")) {
                                Log.other("Â∞èÈïá‰ªªÂä°üåá[" + name + "]#" + amount + "[" + rewardType.rewardName() + "]");
                            }
                        } catch (Throwable th) {
                            Log.runtime(TAG, "spec RewardType:" + itemId + ";Êú™Áü•ÁöÑÁ±ªÂûã");
                        }
                    }
                }
            } else {
                Log.record(jo.getString("resultDesc"));
                Log.runtime(s);
            }
        } catch (Throwable t) {
            Log.runtime(TAG, "getUserTasks err:");
            Log.printStackTrace(TAG, t);
        }
    }
    private void getSignInStatus() {
        try {
            String s = OmegakoiTownRpcCall.getSignInStatus();
            JSONObject jo = new JSONObject(s);
            if (jo.optBoolean("success")) {
                boolean signed = jo.getJSONObject("result").getBoolean("signed");
                if (!signed) {
                    jo = new JSONObject(OmegakoiTownRpcCall.signIn());
                    JSONObject diffItem = jo.getJSONObject("result").getJSONArray("diffItems").getJSONObject(0);
                    int amount = diffItem.getInt("amount");
                    String itemId = diffItem.getString("itemId");
                    RewardType rewardType = RewardType.valueOf(itemId);
                    Log.other("Â∞èÈïáÁ≠æÂà∞[" + rewardType.rewardName() + "]#" + amount);
                }
            }
        } catch (Throwable t) {
            Log.runtime(TAG, "getSignInStatus err:");
            Log.printStackTrace(TAG, t);
        }
    }
    private void houseProduct() {
        try {
            String s = OmegakoiTownRpcCall.houseProduct();
            JSONObject jo = new JSONObject(s);
            if (jo.optBoolean("success")) {
                JSONObject result = jo.getJSONObject("result");
                JSONArray userHouses = result.getJSONArray("userHouses");
                for (int i = 0; i < userHouses.length(); i++) {
                    jo = userHouses.getJSONObject(i);
                    JSONObject extraInfo = jo.getJSONObject("extraInfo");
                    if (!extraInfo.has("toBeCollected"))
                        continue;
                    JSONArray toBeCollected = extraInfo.optJSONArray("toBeCollected");
                    if (toBeCollected != null && toBeCollected.length() > 0) {
                        double amount = toBeCollected.getJSONObject(0).getDouble("amount");
                        if (amount < 500)
                            continue;
                        String houseId = jo.getString("houseId");
                        long id = jo.getLong("id");
                        jo = new JSONObject(OmegakoiTownRpcCall.collect(houseId, id));
                        if (jo.optBoolean("success")) {
                            HouseType houseType = HouseType.valueOf(houseId);
                            String itemId = jo.getJSONObject("result").getJSONArray("rewards").getJSONObject(0)
                                    .getString("itemId");
                            RewardType rewardType = RewardType.valueOf(itemId);
                            NumberFormat numberFormat = NumberFormat.getNumberInstance();
                            ((DecimalFormat) numberFormat).applyPattern("#.00");
                            String formattedAmount = numberFormat.format(amount);
                            Log.other("Â∞èÈïáÊî∂Èáëüåá[" + houseType.name() + "]#" + formattedAmount
                                    + rewardType.rewardName());
                        }
                    }
                }
            } else {
                Log.record(jo.getString("resultDesc"));
                Log.runtime(s);
            }
        } catch (Throwable t) {
            Log.runtime(TAG, "getUserTasks err:");
            Log.printStackTrace(TAG, t);
        }
    }
}
