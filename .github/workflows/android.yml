name: 🕔 🤖 Android CI 自动化构建

on:
  schedule:
    - cron: '0 0 1,11,21,31 * *'
  push:
    branches: ["develop"]
  pull_request:
    branches: ["develop"]
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: ⏳ 设置时区为北京时间
        run: |
          sudo timedatectl set-timezone Asia/Shanghai
          echo "当前时间: $(date)"

      - name: 📂 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ☕ 配置 JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "zulu"
          cache: gradle

      - name: 🛠️ 配置 Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: false
          gradle-version: wrapper

      - name: ⚙️ 授予 gradlew 执行权限
        run: chmod +x gradlew

      - name: 🧰 使用 Gradle 构建
        run: ./gradlew assembleNormalRelease assembleCompatibleRelease -Pversion=${{ github.ref_name }}
        continue-on-error: false  # 构建失败立即终止

      - name: 📦 定位 APK 文件并验证存在性
        id: locate_apks
        run: |
          normal_apk=$(find app/build/outputs/apk/normal/release -name "*.apk" | head -n 1)
          compatible_apk=$(find app/build/outputs/apk/compatible/release -name "*.apk" | head -n 1)
          
          # 验证APK是否存在
          if [ -z "$normal_apk" ] || [ ! -f "$normal_apk" ]; then
            echo "错误：未找到标准版APK"
            exit 1
          fi
          if [ -z "$compatible_apk" ] || [ ! -f "$compatible_apk" ]; then
            echo "错误：未找到兼容版APK"
            exit 1
          fi
          
          echo "normal_apk=$normal_apk" >> $GITHUB_OUTPUT
          echo "compatible_apk=$compatible_apk" >> $GITHUB_OUTPUT

      - name: 🚚 复制 APK 到签名目录
        run: |
          mkdir -p app/build/outputs/apk/all
          cp "${{ steps.locate_apks.outputs.normal_apk }}" app/build/outputs/apk/all/
          cp "${{ steps.locate_apks.outputs.compatible_apk }}" app/build/outputs/apk/all/

      - name: ✅ 签名 APK
        id: sign_apks
        uses: ilharp/sign-android-release@v2
        with:
          releaseDir: app/build/outputs/apk/all
          signingKey: ${{ secrets.ANDROID_SIGNING_KEY }}
          keyAlias: ${{ secrets.ANDROID_KEY_ALIAS }}
          keyStorePassword: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}
          buildToolsVersion: 36.0.0

      - name: 📋 提取签名后的 APK 路径
        id: extract_apks
        run: |
          # 使用更可靠的路径提取方法
          signed_files="${{ steps.sign_apks.outputs.signedFiles }}"
          
          # 查找标准版APK
          signed_normal=$(echo "$signed_files" | tr ':' '\n' | grep -i "Normal" | grep -i "\.apk$" | head -n 1)
          # 查找兼容版APK
          signed_compatible=$(echo "$signed_files" | tr ':' '\n' | grep -i "Compatible" | grep -i "\.apk$" | head -n 1)
          
          # 验证签名后的APK
          if [ -z "$signed_normal" ] || [ ! -f "$signed_normal" ]; then
            echo "错误：未找到签名后的标准版APK"
            exit 1
          fi
          if [ -z "$signed_compatible" ] || [ ! -f "$signed_compatible" ]; then
            echo "错误：未找到签名后的兼容版APK"
            exit 1
          fi
          
          echo "signed_normal=$signed_normal" >> $GITHUB_OUTPUT
          echo "signed_compatible=$signed_compatible" >> $GITHUB_OUTPUT

      - name: 📤 上传兼容版 APK
        uses: actions/upload-artifact@v4
        with:
          name: apk-compatible
          path: ${{ steps.extract_apks.outputs.signed_compatible }}

      - name: 📤 上传标准版 APK
        uses: actions/upload-artifact@v4
        with:
          name: apk-normal
          path: ${{ steps.extract_apks.outputs.signed_normal }}

      - name: ℹ️ 提取文件信息
        id: extract_info
        run: |
          normal_file=$(basename "${{ steps.extract_apks.outputs.signed_normal }}")
          compatible_file=$(basename "${{ steps.extract_apks.outputs.signed_compatible }}")
          
          # 提取版本号（更健壮的正则表达式）
          version=$(echo "$normal_file" | sed -E 's/^.*-(v[0-9]+\.[0-9]+\.[0-9]+\.[a-zA-Z0-9-]+)-signed\.apk$/\1/')
          
          echo "normal_file=$normal_file" >> $GITHUB_OUTPUT
          echo "compatible_file=$compatible_file" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: 🔐 生成 APK 校验和
        run: |
          sha256sum ${{ steps.extract_apks.outputs.signed_normal }} > CHECKSUMS-Sesame-Normal-${{ steps.extract_info.outputs.version }}.sha256
          sha256sum ${{ steps.extract_apks.outputs.signed_compatible }} > CHECKSUMS-Sesame-Compatible-${{ steps.extract_info.outputs.version }}.sha256

      - name: 📢 发送综合消息到 Telegram
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TG_CHAT_ID }}
          token: ${{ secrets.TG_BOT_TOKEN }}
          message: |
            🚀 *新版本 ${{ steps.extract_info.outputs.version }} 安装包构建完成!* 📦

            - 📱 **标准版**: `${{ steps.extract_info.outputs.normal_file }}`
            - 📱 **兼容版**: `${{ steps.extract_info.outputs.compatible_file }}`

            🛠️ 安装指引:
            ✅ 标准版（Normal）: 直接安装，支持 Android 8.0+
            ✅ 兼容版（Compatible）: 文件管理器安装，支持 Android 5.1-7.0
          format: markdown

      - name: 📱 发送标准版 APK 到 Telegram
        if: ${{ steps.extract_apks.outputs.signed_normal != '' }}
        uses: appleboy/telegram-action@master
        with:
          到: ${{ secrets.TG_CHAT_ID }}
          token: ${{ secrets.TG_BOT_TOKEN }}
          document: ${{ steps.extract_apks.outputs.signed_normal }}
          message: "📱 标准版安装包 (Android 8.0+): ${{ steps.extract_info.outputs.normal_file }}"

      - name: 📱 发送兼容版 APK 到 Telegram
        if: ${{ steps.extract_apks.outputs.signed_compatible != '' }}
        uses: appleboy/telegram-action@master
        with:
          到: ${{ secrets.TG_CHAT_ID }}
          token: ${{ secrets.TG_BOT_TOKEN }}
          document: ${{ steps.extract_apks.outputs.signed_compatible }}
          message: "📱 兼容版安装包 (Android 5.1-7.0): ${{ steps.extract_info.outputs.compatible_file }}"

      - name: 🏷️ 创建 Git 标签
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/develop')
        run: |
          VERSION_TAG="${{ steps.extract_info.outputs.version }}"
          echo "创建版本标签: $VERSION_TAG"
          git tag "$VERSION_TAG"
          git push origin "$VERSION_TAG"

      - name: 🎉 上传资产到 GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ steps.extract_info.outputs.version }}
          文件: |
            ${{ steps.extract_apks.outputs.signed_compatible }}
            ${{ steps.extract_apks.outputs.signed_normal }}
            CHECKSUMS-*.sha256
          tag_name: ${{ steps.extract_info.outputs.version }}
          draft: false
          append_body: true
          generate_release_notes: false
          body: |
            ### 🛠️ 安装说明
            1. **标准版（Normal）**  
               - 直接安装，支持 Android 8.0 及以上系统  
            2. **兼容版（Compatible）**  
               - 通过文件管理器安装，支持 Android 5.1-7.0 系统  


            ⚠️ 重要声明  
            本安装包仅限个人学习研究，禁止商业用途和非法分发  
            使用中出现问题需自行承担后果
